generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  clerkId   String     @unique
  email     String     @unique
  name      String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  role      UserRole   @default(STUDENT)
  products  Product[]
  purchases Purchase[]

  @@index([clerkId])
}

model Product {
  id                        String     @id @default(cuid())
  title                     String
  slug                      String     @unique
  description               String
  price                     Decimal    @db.Decimal(10, 2)
  published                 Boolean    @default(false)
  featuredImage             String?
  categories                String?
  language                  String?
  primaryCountry            String?
  createdAt                 DateTime   @default(now())
  updatedAt                 DateTime   @updatedAt
  creatorId                 String
  featuredImageUploadStatus String?    @default("completed")
  featuredImageUrl          String?
  modules                   Module[]
  creator                   User       @relation(fields: [creatorId], references: [id])
  purchases                 Purchase[]

  @@index([creatorId])
  @@index([slug])
  @@index([published])
}

model Module {
  id          String   @id @default(cuid())
  title       String
  description String?
  position    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  productId   String
  lessons     Lesson[]
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([position])
}

model Lesson {
  id                 String      @id @default(cuid())
  title              String
  description        String?
  contentType        ContentType
  contentUrl         String?
  position           Int
  isPreview          Boolean     @default(false)
  duration           Int?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  moduleId           String
  processedAt        DateTime?
  processingError    String?
  processingJobId    String?
  processingProgress Int?        @default(0)
  rawVideoUrl        String?
  thumbnailUrl       String?
  uploadStatus       String?     @default("pending")
  uploadedAt         DateTime?
  videoQualities     Json?
  module             Module      @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  progress           Progress[]

  @@index([moduleId])
  @@index([position])
  @@index([uploadStatus])
  @@index([processingJobId])
}

model Purchase {
  id              String        @id @default(cuid())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  amount          Decimal       @db.Decimal(10, 2)
  stripePaymentId String?
  paymentStatus   PaymentStatus @default(PENDING)
  userId          String
  productId       String
  progress        Progress[]
  product         Product       @relation(fields: [productId], references: [id])
  user            User          @relation(fields: [userId], references: [id])

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
  @@index([stripePaymentId])
}

model Progress {
  id          String    @id @default(cuid())
  completed   Boolean   @default(false)
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  purchaseId  String
  lessonId    String
  lesson      Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  purchase    Purchase  @relation(fields: [purchaseId], references: [id], onDelete: Cascade)

  @@unique([purchaseId, lessonId])
  @@index([purchaseId])
  @@index([lessonId])
}

enum UserRole {
  STUDENT
  CREATOR
  ADMIN
}

enum ContentType {
  VIDEO
  PDF
  AUDIO
  TEXT
  QUIZ
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
