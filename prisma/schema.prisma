// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
   output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model - extended from Clerk auth
model User {
  id            String    @id @default(cuid())
  clerkId       String    @unique
  email         String    @unique
  name          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          UserRole  @default(STUDENT)
  
  // Relations
  products      Product[]  // Products created by this user (as creator)
  purchases     Purchase[] // Products purchased by this user (as student)
  
  @@index([clerkId])
}

enum UserRole {
  STUDENT
  CREATOR
  ADMIN
}

// Product model - courses, ebooks, etc.
model Product {
  id            String    @id @default(cuid())
  title         String
  slug          String    @unique
  description   String
  price         Decimal   @db.Decimal(10, 2)
  published     Boolean   @default(false)
  featuredImage String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  creatorId     String
  creator       User      @relation(fields: [creatorId], references: [id])
  purchases     Purchase[]
  modules       Module[]
  
  @@index([creatorId])
  @@index([slug])
}

// Module model - chapters/sections within a product
model Module {
  id            String    @id @default(cuid())
  title         String
  position      Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  productId     String
  product       Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  lessons       Lesson[]
  
  @@index([productId])
}

// Lesson model - individual content units
model Lesson {
  id            String    @id @default(cuid())
  title         String
  description   String?
  contentType   ContentType
  contentUrl    String?
  position      Int
  isPreview     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  moduleId      String
  module        Module    @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  progress      Progress[]
  
  @@index([moduleId])
}

enum ContentType {
  VIDEO
  PDF
  AUDIO
  TEXT
  QUIZ
}

// Purchase model - tracks product purchases
model Purchase {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  amount        Decimal   @db.Decimal(10, 2)
  
  // Payment info
  stripePaymentId String?
  paymentStatus PaymentStatus @default(PENDING)
  
  // Relations
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  productId     String
  product       Product   @relation(fields: [productId], references: [id])
  progress      Progress[]
  
  @@index([userId])
  @@index([productId])
  @@index([stripePaymentId])
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

// Progress model - tracks student progress
model Progress {
  id            String    @id @default(cuid())
  completed     Boolean   @default(false)
  completedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  purchaseId    String
  purchase      Purchase  @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  lessonId      String
  lesson        Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@unique([purchaseId, lessonId])
  @@index([purchaseId])
  @@index([lessonId])
}